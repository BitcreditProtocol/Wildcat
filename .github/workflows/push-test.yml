name: GCP Registry Push Test

on:
  workflow_dispatch:
  push:
    branches:
      - cleot/test-gcp-registry
  

permissions:
  contents: read
  # id-token: write # For Workload Identity Federation

jobs:
  test-gar-push:
    runs-on: ubuntu-latest
    concurrency:
      group: gcp-registry-test-${{ github.ref }}
      cancel-in-progress: true

    env:
      PROJECT_ID: "bitcr-shared"
      GAR_LOCATION: "europe-west1"
      REPOSITORY: "bitcr-wildcat-dev"
      TEST_IMAGE_NAME: "simple-test-image"

    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet


    # test image
    - name: Create dummy Dockerfile
      run: |
        echo "FROM alpine:latest" > Dockerfile.test
        echo "LABEL description=\"Simple test image for GAR push verification\"" >> Dockerfile.test
        echo "RUN echo \"Test image build timestamp: $(date)\"" >> Dockerfile.test
        echo "CMD echo \"GAR push test image executed successfully!\"" >> Dockerfile.test
        echo "--- Dockerfile.test contents ---"
        cat Dockerfile.test
        echo "------------------------------"


    - name: Build, Push, Verify
      run: |
        # Enable BuildKit for potentially faster builds and better output (optional, but good practice)
        export DOCKER_BUILDKIT=1 
        
        LOCAL_TAG="${{ env.TEST_IMAGE_NAME }}:local-build" # Local tag for the built image
        
        # Define remote tags for GAR
        REMOTE_TAG_SHA="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.TEST_IMAGE_NAME }}:${GITHUB_SHA}"
        REMOTE_TAG_TEST="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.TEST_IMAGE_NAME }}:latest-test"

        echo "Building test image ${LOCAL_TAG} from Dockerfile.test with context ."
        docker build -t "${LOCAL_TAG}" -f Dockerfile.test . # Context is current directory (repo root)

        echo "Tagging ${LOCAL_TAG} as ${REMOTE_TAG_SHA}"
        docker tag "${LOCAL_TAG}" "${REMOTE_TAG_SHA}"
        echo "Pushing ${REMOTE_TAG_SHA}"
        docker push "${REMOTE_TAG_SHA}" # First push command

        echo "Tagging ${LOCAL_TAG} as ${REMOTE_TAG_TEST}"
        docker tag "${LOCAL_TAG}" "${REMOTE_TAG_TEST}" # This re-tags the same local image
        echo "Pushing ${REMOTE_TAG_TEST}"
        docker push "${REMOTE_TAG_TEST}" # Second push command for the additional tag
        
        echo "Test image push complete."
        echo "You can find the image at:"
        echo "  ${REMOTE_TAG_SHA}"
        echo "  ${REMOTE_TAG_TEST}"
        
        # Optional: Verify by pulling one of the tags
        echo "Attempting to pull ${REMOTE_TAG_SHA} to verify..."
        docker pull "${REMOTE_TAG_SHA}"

